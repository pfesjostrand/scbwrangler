data
data2
data <- readr::read_csv("data/translate_names_test_data.csv")
translate_names <- function(data, dictionary = "default", reverse = FALSE) {
# if dictionary is default a fallback set is used, if it is a character this is
# treated as a path if it is a data_frame this is used directly as dictionary.
if (is.data.frame(dictionary) == FALSE) {
if (dictionary == "default") {
dictionary <- suppressMessages( readr::read_csv(here::here(
"data", "translate_names_default_dictionary_swe_to_eng.csv")))
warning("No dictionary specified, using the default")
} else {
stopifnot(class(dictionary) == "character")
stopifnot(file.exists(dictionary) == TRUE)
dictionary <- readr::read_csv(dictionary)
}
}
# reverse allows reversing the dictionary if there is a 1:1 mapping between
# languages. There should be a error check for this but there isn't atm.
if (reverse == FALSE) {
fr <- 1L
to <- 2L
} else {
fr <- 2L
to <- 1L
}
# retrive the names of the data, match these to the dictionary column[fr]
# if no match exists NA will be entered instead.
varnames <- names(data)
translat <- dictionary[[to]][match(noms, dictionary[[fr]])]
# map2_chr walks along translat applying nareplace to each element, which
# checks if element is NA and in that case replace with original name.
nareplace <- function(arg1, arg2) {
if(is.na(arg1)) {
return(arg2)
} else {
return(arg1)
}
}
translat <- purrr::map2_chr(translat, varnames, nareplace)
# replace names with translated names and return the data frame
names(data) <- translat
return(data)
}
translate_names(data)
data <- tibble::as_tibble(pxR::read.px("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB/riksdagsval_1973_2018.px))
)
)
)
data <- tibble::as_tibble(pxR::read.px("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB/riksdagsval_1973_2018.px)))
data <- pxR::read.px("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB/riksdagsval_1973_2018.px")
data <- tibble::as_tibble(data)
translate_names(data)
devtools::document()
?translate_names
devtools::document()
x <- as.character()
x
warnings()
classdic <- suppressMessages(readr::read_csv(here::here(
"data", "translate_names_default_dictionary_swe_to_eng.csv")))
warning("No dictionary specified, fallback to default")
classdic
data
z <- vector("factor")
z <- factor("asd", "las")
x
z
z <- factor(c("asd", "las"))
z
as.factor(z)
where()
?which
names(dictionary)
which("year" %in% dictionary)
which("english" %in% dictionary)
which("english" %in% names(dictionary))
which("swedish" %in% names(dictionary))
names(dictionary)
c(1,2,3)
which(3, c(1,2,3))
which(3 == c(1,2,3))
which("english" == names(dictionary))
# retrive the names of the data, match these to the dictionary column[fr]
# if no match exists NA will be entered instead.
varnames <- names(data)
translat <- classdic[[to]][match(varnames, classdic[[fr]])]
translat
classdic
to
ft
fr <- "english"
to <- "class"
translat <- classdic[[to]][match(varnames, classdic[[fr]])]
translat
classdic[[to]]
varnames
classdic[[to]]
classdic[[fr]]
# retrive the names of the data, match these to the dictionary column[fr]
# if no match exists NA will be entered instead.
varnames <- names(data)
varnames
#' into.
#'
#' @param data Data frame object of which the names are to be translated
#' @param dictionary Either a path to a .csv file or a data frame object. If no
#' dictionary is specified a fallback dictionary is used with a warning.
#' @param reverse Setting this to true everses the order of the languages,
#' works only if there is a 1:1 mapping, not recommended.
#'
#' @return returns the data_frame, hopefully with translated names.
#'
translate_names <- function(data, dictionary = "default", reverse = FALSE) {
# if dictionary is default a fallback set is used, if it is a character this is
# treated as a path if it is a data_frame this is used directly as dictionary.
if (is.data.frame(dictionary) == FALSE) {
if (dictionary == "default") {
dictionary <- suppressMessages( readr::read_csv(here::here(
"data", "translate_names_default_dictionary_swe_to_eng.csv")))
warning("No dictionary specified, fallback to default")
} else {
stopifnot(class(dictionary) == "character")
stopifnot(file.exists(dictionary) == TRUE)
dictionary <- readr::read_csv(dictionary)
}
}
# reverse allows reversing the dictionary if there is a 1:1 mapping between
# languages. There should be a error check for this but there isn't atm.
if (reverse == FALSE) {
fr <- 1L
to <- 2L
} else {
fr <- 2L
to <- 1L
}
# retrive the names of the data, match these to the dictionary column[fr]
# if no match exists NA will be entered instead.
varnames <- names(data)
translat <- dictionary[[to]][match(varnames, dictionary[[fr]])]
# map2_chr walks along translat applying nareplace to each element, which
# checks if element is NA and in that case replace with original name.
nareplace <- function(arg1, arg2) {
if(is.na(arg1)) {
return(arg2)
} else {
return(arg1)
}
}
translat <- purrr::map2_chr(translat, varnames, nareplace)
# replace names with translated names and return the data frame
names(data) <- translat
return(data)
}
data <- translate_names(data)
data
varnames <- names(data)
varnames
match(varnames, classdic[[fr]])
classdic[[fr]]
classsdic[[to]]
classdic[[to]]
classdic[[to]][2]
classdic[[to]][2, 9]
classdic[[to]][c(2,9)]
classdic[[to]][match(varnames, classdic[[fr]])]
translat <- classdic[[to]][match(varnames, classdic[[fr]])]
translat
which(translat == date)
#
date <- c("da", "dat", "Date", "date", "dates", "Dates")
which(translat == date)
which(translat == intr)
date %in% translat
intr %in% translat
translat
translat %in% intr
intr <- c("i", "int", "Int", "integer", "Integer", "integers", "Integers")
translat %in% intr
which(translat == intr)
which(translat %in% intr)
translat %in% intr
translat
varnames
classdic[[to]][match(varnames, classdic[[fr]])]
classmatch
classmatch <- classdic[[to]][match(varnames, classdic[[fr]])]
classmatch
classmatch %in% intr
if(classmatch %in% intr) {1}
if(classmatch[1] %in% intr) {1}
intr
if(classmatch[2] %in% intr) {1}
# this enables some variation in spelling etc. I would prefer it could handle
# more misspellings; that could be possible using stringr but atm this is OK.
date <- c("da", "dat", "Date", "date", "dates", "Dates")
intr <- c("i", "int", "Int", "integer", "Integer", "integers", "Integers")
numr <- c("n", "num", "Num", "numeric", "Numeric", "numerics", "Numerics")
dubl <- c("d", "dbl", "Dbl", "dubble", "dubbl",
"Dubbl", "Dubble", "dubbles", "Dubbles")
fact <- c("f", "fct", "fctr", "factor", "Factor", "factors", "Factors")
ordr <- c("o", "ord", "ordr", "order", "ordered", "Ordered")
chrs <- c("c", "chr", "Chr", "character", "Character", "characters",
"Characters", "str", "Str", "string", "String" )
# retrive the names of the data, match these to the classdic column given
# by "to", if no match exists NA will be entered instead, store in classmatch
varnames <- names(data)
classmatch <- classdic[[to]][match(varnames, classdic[[fr]])]
# check if a classmatch element is found in any of the variation of class
# names defined above. If so the the data column corresponding to that
# classmatch is converted to the appropiate class. Long function follow.
classconvert <- function(x, y) {
ctrT  <- 0
if(is.na(x)) {
return(y)
}
if(class(y) == "factor" & (x %in% fact == FALSE)) {
y <- as.character()
}
if(x %in% intr) {
ctrT <- ctrT + 1
y <- as.integer(y)
}
if(x %in% numr) {
ctrT <- ctrT + 1
y <- as.numeric(y)
}
if(x %in% chrs) {
ctrT <- ctrT + 1
y <- as.character(y)
}
if(x %in% dubl) {
ctrT <- ctrT + 1
col <- as.double(y)
}
if(x %in% fact) {
ctrT <- ctrT + 1
col <- as.factor(y)
}
if(x %in% ordr) {
ctrT <- ctrT + 1
col <- as.ordered(y)
}
if(x %in% date) {
ctrT <- ctrT + 1
col <- as.Date(y)
}
if(ctrT < 1) {
warning("Instance of no match occured")
}
if(ctrT > 1) {
stop("Error: A double match occured")
}
return(y)
}
# purr is used to walk along classmatch and data applying classconvert to
# each column this will create a list of one column tibbles
purrr::map2(classmatch, data, classconvert)
data
classmatch
classconvert(classmatch[1], data[1])
classconvert(classmatch, data[1])
classconvert(classmatch, data[[1]])
classmatch
data
purrr:map(data, class())
purrr::map(data, class())
purrr::map(data, class
)
classmatch
data
# purr is used to walk along classmatch and data applying classconvert to
# each column this will create a list of one column tibbles
purrr::map2(classmatch, data[[.]], classconvert)
data[1]
classsconvert(classmatch[1], data[1])
classconvert(classmatch[1], data[1])
classconvert(classmatch[1], data[[1]])
classconvert(classmatch[[1]], data[[1]])
data[1]
x <- data[1]
x
x <- classmatch[1]
x
y <- data[1]
x
y
ctrT  <- 0
if(is.na(x)) {
return(y)
}
if(class(y) == "factor" & (x %in% fact == FALSE)) {
y <- as.character()
}
class(y) == "factor"
class(y)
y
pull(y)
y[1]
class(y[1])
class(y[[1]])
y <- y[[1]]
ctrT  <- 0
y <- data[ยก]
y <- data[1]
y <- y[[1]]
ctrT  <- 0
if(is.na(x)) {
return(y)
}
if(class(y) == "factor" & (x %in% fact == FALSE)) {
y <- as.character()
}
y
data[1]
data[[1]]
class(data[[1]])
y <- data[1]
dplyr::pull(y)
y <- data[1]
y <- dplyr::pull(y)
y2 <- y
ctrT  <- 0
if(class(y) == "factor" & (x %in% fact == FALSE)) {
y <- as.character(y)
}
y
class(y)
if(x %in% intr) {
ctrT <- ctrT + 1
y <- as.integer(y)
}
class(y)
# check if a classmatch element is found in any of the variation of class
# names defined above. If so the the data column corresponding to that
# classmatch is converted to the appropiate class. Long function follow.
classconvert <- function(x, y) {
y <- dplyr::pull(y)
ctrT  <- 0
if(is.na(x)) {
return(y)
}
if(class(y) == "factor" & (x %in% fact == FALSE)) {
y <- as.character(y)
}
if(x %in% intr) {
ctrT <- ctrT + 1
y <- as.integer(y)
}
if(x %in% numr) {
ctrT <- ctrT + 1
y <- as.numeric(y)
}
if(x %in% chrs) {
ctrT <- ctrT + 1
y <- as.character(y)
}
if(x %in% dubl) {
ctrT <- ctrT + 1
col <- as.double(y)
}
if(x %in% fact) {
ctrT <- ctrT + 1
col <- as.factor(y)
}
if(x %in% ordr) {
ctrT <- ctrT + 1
col <- as.ordered(y)
}
if(x %in% date) {
ctrT <- ctrT + 1
col <- as.Date(y)
}
if(ctrT < 1) {
warning("Instance of no match occured")
}
if(ctrT > 1) {
stop("Error: A double match occured")
}
return(y)
}
# check if a classmatch element is found in any of the variation of class
# names defined above. If so the the data column corresponding to that
# classmatch is converted to the appropiate class. Long function follow.
classconvert <- function(x, y) {
y <- dplyr::pull(y)
ctrT  <- 0
if(is.na(x)) {
return(y)
}
if(class(y) == "factor" & (x %in% fact == FALSE)) {
y <- as.character(y)
}
if(x %in% intr) {
ctrT <- ctrT + 1
y <- as.integer(y)
}
if(x %in% numr) {
ctrT <- ctrT + 1
y <- as.numeric(y)
}
if(x %in% chrs) {
ctrT <- ctrT + 1
y <- as.character(y)
}
if(x %in% dubl) {
ctrT <- ctrT + 1
y <- as.double(y)
}
if(x %in% fact) {
ctrT <- ctrT + 1
y <- as.factor(y)
}
if(x %in% ordr) {
ctrT <- ctrT + 1
y <- as.ordered(y)
}
if(x %in% date) {
ctrT <- ctrT + 1
y <- as.Date(y)
}
if(ctrT < 1) {
warning("Instance of no match occured")
}
if(ctrT > 1) {
stop("Error: A double match occured")
}
return(y)
}
# purr is used to walk along classmatch and data applying classconvert to
# each column this will create a list of one column tibbles
purrr::map2(classmatch, data, classconvert)
# check if a classmatch element is found in any of the variation of class
# names defined above. If so the the data column corresponding to that
# classmatch is converted to the appropiate class. Long function follow.
classconvert <- function(x, y) {
ctrT  <- 0
if(is.na(x)) {
return(y)
}
if(class(y) == "factor" & (x %in% fact == FALSE)) {
y <- as.character(y)
}
if(x %in% intr) {
ctrT <- ctrT + 1
y <- as.integer(y)
}
if(x %in% numr) {
ctrT <- ctrT + 1
y <- as.numeric(y)
}
if(x %in% chrs) {
ctrT <- ctrT + 1
y <- as.character(y)
}
if(x %in% dubl) {
ctrT <- ctrT + 1
y <- as.double(y)
}
if(x %in% fact) {
ctrT <- ctrT + 1
y <- as.factor(y)
}
if(x %in% ordr) {
ctrT <- ctrT + 1
y <- as.ordered(y)
}
if(x %in% date) {
ctrT <- ctrT + 1
y <- as.Date(y)
}
if(ctrT < 1) {
warning("Instance of no match occured")
}
if(ctrT > 1) {
stop("Error: A double match occured")
}
return(y)
}
# purr is used to walk along classmatch and data applying classconvert to
# each column this will create a list of one column tibbles
purrr::map2(classmatch, data, classconvert)
# purr is used to walk along classmatch and data applying classconvert to
# each column this will create a list of one column tibbles
tst <- purrr::map2(classmatch, data, classconvert)
class(tst)
purrr::map(tst, class)
classmatch
data
classdic
reduce(tst)
purrr::reduce(tst)
purrr::reduce(tst, dplyr::bind_cols)
names(tst) <- names(data)
tst
head(tst)
purrr::reduce(tst, dplyr::bind_cols)
?purrr::reduce
classconvert(classmatch[1], data[1]
for(i in seq_along(classmatch)) {
)
}
classconvert(classmatch[1], data[1])
classconvert(classmatch[1], data[[1]])
class(classconvert(classmatch[1], data[[1]]))
for(i in seq_along(classmatch)) {
data[[i]] <- classconvert(classmatch[i], data[[i]])
}
warnings()
data
devtools::document()
devtools::document()
