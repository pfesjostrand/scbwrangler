if (length(dirlist_px) != 0) {
out[1:length(dirlist_px)] <- purrr::map(dirlist_px, pxread)
names(out)[1:length(dirlist_px)] <- namelist_px
if (all(names(out) != namelist_px)) {
warning("Warning: Some .px files seem to have not been read. Check.")
}
}
if (length(dirlist_csv) != 0)  {
ind1 <-  length(out) + 1
ind2 <- (ind1 + length(dirlist_csv) - 1)
out[ind1:ind2] <- purr::map(dirlist_csv, csvread)
names(out)[ind1:ind2] <- namelist_csv
if (all(names(out[ind1:ind2]) != namelist_csv)) {
warning("Warning: Some .csv files seem to have not been read. Check.")
}
}
out
# FUN: translate_names --------------------------------------------------------
translate_dlist <- function(datalist, dictionary = "default", reverse = FALSE) {
purrr::map(datalist, translate_names, dictionary, reverse)
}
translate_dlist(out)
#' into.
#'
#' @param data Data frame object of which the names are to be translated
#' @param dictionary Either a path to a .csv file or a data frame object. If no
#' dictionary is specified a fallback dictionary is used with a warning.
#' @param reverse Setting this to true everses the order of the languages,
#' works only if there is a 1:1 mapping, not recommended.
#'
#' @return returns the data_frame, hopefully with translated names.
#' @export
translate_names <- function(data, dictionary = "default", reverse = FALSE) {
# if dictionary is default a fallback set is used, if it is a character this is
# treated as a path if it is a data_frame this is used directly as dictionary.
if (is.data.frame(dictionary) == FALSE) {
if (dictionary == "default") {
dictionary <- suppressMessages( readr::read_csv(here::here(
"data", "translate_names_default_dictionary_swe_to_eng.csv")))
warning("No dictionary specified, fallback to default")
} else {
stopifnot(class(dictionary) == "character")
stopifnot(file.exists(dictionary) == TRUE)
dictionary <- readr::read_csv(dictionary)
}
}
# reverse allows reversing the dictionary if there is a 1:1 mapping between
# languages. There should be a error check for this but there isn't atm.
if (reverse == FALSE) {
fr <- 1L
to <- 2L
} else {
fr <- 2L
to <- 1L
}
# retrive the names of the data, match these to the dictionary column[fr]
# if no match exists NA will be entered instead.
varnames <- names(data)
translat <- dictionary[[to]][match(varnames, dictionary[[fr]])]
# map2_chr walks along translat applying nareplace to each element, which
# checks if element is NA and in that case replace with original name.
nareplace <- function(arg1, arg2) {
if(is.na(arg1)) {
return(arg2)
} else {
return(arg1)
}
}
translat <- purrr::map2_chr(translat, varnames, nareplace)
# replace names with translated names and return the data frame
names(data) <- translat
return(data)
}
translate_dlist(out)
purrr::map(out, names)
unlist(purrr::map(out, names))
class(unlist(purrr::map(out, names)))
unique(unlist(purrr::map(out, names)))
datalist <- lst()
datalist <- tibble::lst()
datalist <- purrr::map2_chr(translat, varnames, nareplace)
# map2_chr walks along translat applying nareplace to each element, which
# checks if element is NA and in that case replace with original name.
nareplace <- function(arg1, arg2) {
if(is.na(arg1)) {
return(arg2)
} else {
return(arg1)
}
}
datalist <- purrr::map2_chr(translat, varnames, nareplace)
# if dictionary is default a fallback set is used, if it is a character this is
# treated as a path if it is a data_frame this is used directly as dictionary.
if (is.data.frame(dictionary) == FALSE) {
if (dictionary == "default") {
dictionary <- suppressMessages( readr::read_csv(here::here(
"data", "translate_names_default_dictionary_swe_to_eng.csv")))
warning("No dictionary specified, fallback to default")
} else {
stopifnot(class(dictionary) == "character")
stopifnot(file.exists(dictionary) == TRUE)
dictionary <- readr::read_csv(dictionary)
}
}
dictionary <- "default"
reverse <- F
# if dictionary is default a fallback set is used, if it is a character this is
# treated as a path if it is a data_frame this is used directly as dictionary.
if (is.data.frame(dictionary) == FALSE) {
if (dictionary == "default") {
dictionary <- suppressMessages( readr::read_csv(here::here(
"data", "translate_names_default_dictionary_swe_to_eng.csv")))
warning("No dictionary specified, fallback to default")
} else {
stopifnot(class(dictionary) == "character")
stopifnot(file.exists(dictionary) == TRUE)
dictionary <- readr::read_csv(dictionary)
}
}
# reverse allows reversing the dictionary if there is a 1:1 mapping between
# languages. There should be a error check for this but there isn't atm.
if (reverse == FALSE) {
fr <- 1L
to <- 2L
} else {
fr <- 2L
to <- 1L
}
# retrive the names of the data, match these to the dictionary column[fr]
# if no match exists NA will be entered instead.
varnames <- names(data)
translat <- dictionary[[to]][match(varnames, dictionary[[fr]])]
# map2_chr walks along translat applying nareplace to each element, which
# checks if element is NA and in that case replace with original name.
nareplace <- function(arg1, arg2) {
if(is.na(arg1)) {
return(arg2)
} else {
return(arg1)
}
}
data
data <- "~/Git/pfesjostrand/swedish-municipal-voters/data/SCB/"
data
datalist <- tibble::lst()
datalist <- purrr::map2_chr(translat, varnames, nareplace)
# if dictionary is default a fallback set is used, if it is a character this is
# treated as a path if it is a data_frame this is used directly as dictionary.
if (is.data.frame(dictionary) == FALSE) {
if (dictionary == "default") {
dictionary <- suppressMessages( readr::read_csv(here::here(
"data", "translate_names_default_dictionary_swe_to_eng.csv")))
warning("No dictionary specified, fallback to default")
} else {
stopifnot(class(dictionary) == "character")
stopifnot(file.exists(dictionary) == TRUE)
dictionary <- readr::read_csv(dictionary)
}
}
# reverse allows reversing the dictionary if there is a 1:1 mapping between
# languages. There should be a error check for this but there isn't atm.
if (reverse == FALSE) {
fr <- 1L
to <- 2L
} else {
fr <- 2L
to <- 1L
}
# retrive the names of the data, match these to the dictionary column[fr]
# if no match exists NA will be entered instead.
varnames <- names(data)
translat <- dictionary[[to]][match(varnames, dictionary[[fr]])]
# map2_chr walks along translat applying nareplace to each element, which
# checks if element is NA and in that case replace with original name.
nareplace <- function(arg1, arg2) {
if(is.na(arg1)) {
return(arg2)
} else {
return(arg1)
}
}
datalist <- tibble::lst()
datalist <- purrr::map2_chr(translat, varnames, nareplace)
translat <- purrr::map2_chr(translat, varnames, nareplace)
# if dictionary is default a fallback set is used, if it is a character this is
# treated as a path if it is a data_frame this is used directly as dictionary.
if (is.data.frame(dictionary) == FALSE) {
if (dictionary == "default") {
dictionary <- suppressMessages( readr::read_csv(here::here(
"data", "translate_names_default_dictionary_swe_to_eng.csv")))
warning("No dictionary specified, fallback to default")
} else {
stopifnot(class(dictionary) == "character")
stopifnot(file.exists(dictionary) == TRUE)
dictionary <- readr::read_csv(dictionary)
}
}
# reverse allows reversing the dictionary if there is a 1:1 mapping between
# languages. There should be a error check for this but there isn't atm.
if (reverse == FALSE) {
fr <- 1L
to <- 2L
} else {
fr <- 2L
to <- 1L
}
# retrive the names of the data, match these to the dictionary column[fr]
# if no match exists NA will be entered instead.
varnames <- names(data)
translat <- dictionary[[to]][match(varnames, dictionary[[fr]])]
# map2_chr walks along translat applying nareplace to each element, which
# checks if element is NA and in that case replace with original name.
nareplace <- function(arg1, arg2) {
if(is.na(arg1)) {
return(arg2)
} else {
return(arg1)
}
}
translat <- purrr::map2_chr(translat, varnames, nareplace)
# replace names with translated names
names(data) <- translat
data
translat
data
path
# list path of items in directory, subset those ending with .px or.csv
dirlist <- paste(path, list.files(path), sep="/")
dirlist_px  <- stringr::str_subset(dirlist, "\\.px$")
dirlist_csv <- stringr::str_subset(dirlist, "\\.csv$")
# get the names of items in directory that end with .px or .csv
namelist_px  <- stringr::str_subset(list.files(path), "\\.px$")
namelist_csv <- stringr::str_subset(list.files(path), "\\.csv$")
# define two functions for reading files and transforming into tibble
# and a list vector that will be returned as output by load_directory
pxread  <- function(path) tibble::as_tibble(pxR::read.px(path))
csvread <- function(path) tibble::as_tibble(readr::read_csv(path))
out <- tibble::lst()
# read all .px files into out and check all .px items are read then read
# all .csv files onto the end of out and check all .csv imes are read.
if (length(dirlist_px) != 0) {
out[1:length(dirlist_px)] <- purrr::map(dirlist_px, pxread)
#names(out)[1:length(dirlist_px)] <- namelist_px
if (all(names(out) != namelist_px)) {
warning("Warning: Some .px files seem to have not been read. Check.")
}
}
out
class(out)
out <- tibble::lst()
out
# read all .px files into out and check all .px items are read then read
# all .csv files onto the end of out and check all .csv imes are read.
if (length(dirlist_px) != 0) {
out[1:length(dirlist_px)] <- purrr::map(dirlist_px, pxread)
names(out)[1:length(dirlist_px)] <- namelist_px
if (all(names(out) != namelist_px)) {
warning("Warning: Some .px files seem to have not been read. Check.")
}
}
out
output <- lst()
output <- tibble::lst()
purrr::map_chr(dlist, names,)
purrr::map_chr(our, names,)
purrr::map_chr(out, names,)
purrr::map_chr(out, names)
purrr::map(out, names)
unique(unlist(purrr::map(out, names)))
output <- tibble::lst()
output[2] <- unique(unlist(purrr::map(out, names)))
output[[2]] <- unique(unlist(purrr::map(out, names)))
output
dirlis
dirlist
summary(out)
str(out)
size(out)
out
unlist(purrr::map(out, class)))
unlist(purrr::map(out, class))
purrr::map(out, names)
?tibble::lst
tibble::lst(3)
tibble::lst(n=3)
tibble::lst(length = 3)
tibble::lst("changed_variables" = NULL)
tibble::lst("changed_variables" = 1:3)
x <- tibble::lst()
x
x[2] <- tibble::lst("changed_variables" = 1:3)
x
x[[2]] <- tibble::lst("changed_variables" = 1:3)
x
x[2] <- tibble::lst(NULL)
x
names(x)[2] <- "ss"
x
x[2][1]
x[2][1] <- NULL
x[2][[1]] <- NULL
x[2][[1]] <- c(222)
x
x[2][1] <- c(111)
x
x[2][1] <- vector("list", 3)
x[2][[1]] <- vector("list", 3)
x
names(x)[2][1] <- "sss"
x
names(x)[2][1] <- "s55"
x
names(x)[2][2] <- "s55"
o <- tibble::lst()
o
o[[1]] <- dlist
o[[1]] <- out
o
names(o)[1] <- "data"
o
o[2] <- tibble::lst()
o[2]
o[[2]] <- tibble::lst()
o
o[2][[1]] <- tibble::lst()
o[2][[2]] <- tibble::lst()
o
o[2][2] <- tibble::lst()
o[[2]][1] <- tibble::lst()
o
o[[2]][[1]] <- tibble::lst()
o[[2]][[2]] <- tibble::lst()
o
names(o)[2][1] <- "nammes"
o
names(o)[2] <- "nammes"
names(o)[2][1] <- "unc"
names(o)[2][2] <- "tor"
o
o[[2]]        <- tibble::lst()
names(o)[2]   <- "changed_variables"
o <- tibble::lst()
o[[1]] <- out
names(o)[1] <- data
o[[2]]        <- tibble::lst()
names(o)[2]   <- "changed_variables"
o[[2]][[1]]   <- tibble::lst()
names(o)[[2]][1] <- "names_variables_unique"
o[[2]][[2]]   <- tibble::lst()
names(o)[[2]][2] <- "names_variables_location"
o <- tibble::lst()
o[[1]] <- out
names(o)[1] <- data
o
o <- tibble::lst()
o[[1]] <- out
names(o)[1] <- "data"
o
o[1]
o[[2]]        <- tibble::lst()
o[2]
o[2]        <- tibble::lst()
names(o)[2]   <- "changed_variables"
o[2]
o[[2]][[1]]   <- tibble::lst()
o[2]
names(o)[[2]][1] <- "names_variables_unique"
o[2]
names(o)
o[[2]]        <- tibble::lst()
names(o)[2]   <- "changed_variables"
names(o)[2][1] <- "names_variables_unique"
names(o)
names(o)[2]   <- "changed_variables"
names(o)
o[2]
o[[2]]
o[[2]][[1]]   <- tibble::lst()
o[[2]]
names(o)
names(o[2])
names(o[[2]])[1] <- "names_variables_unique"
names(o)
names(o[2])
names(o[[2]])
o <- tibble::lst()
o[[1]] <- out
names(o)[1] <- "data"
o[[2]]        <- tibble::lst()
names(o)[2]   <- "changed_variables"
o[[2]][[1]]   <- tibble::lst()
names(o[[2]])[1] <- "names_variables_unique"
o[[2]][[2]]   <- tibble::lst()
names(o[[2]])[2] <- "names_variables_location"
o
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R')
purrr::map(out, class)
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R')
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R')
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R')
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
output[[3]][[3]]      <- purrr::map(data, function(.) map(class(.)))
output[[3]][[3]]      <- purrr::map(data, function(x) map(class(x)))
output[[3]][[3]]      <- purrr::map(data, function(x) map(class(x)))
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
output[[3]][[3]]      <- purrr::map(data, function(x) map(class(x)))
load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
tst <- load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
translate_names_dlist(tst)
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
translate_names_dlist(tst)
tst <- translate_names_dlist(tst)
fix_factors_dlist(tst)
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
fix_factors_dlist(tst)
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
tst <- load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
tst <- translate_names_dlist(tst)
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
tst <- translate_names_dlist(tst)
tst
tst$data
fix_factors_dlist(tst)
warnings()
source('~/Git/pfesjostrand/scbwrangler/R/funs_load_edit.R', echo=TRUE)
fix_factors_dlist(tst)
warnings()
fix_factors_dlist(tst)
tst <- load_directory("~/Git/pfesjostrand/swedish-municipal-voters/data/SCB")
tst <- translate_names_dlist(tst)
tst <- fix_factors_dlist(tst)
summary(tst)
tst$changed_vars
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
#' along the pipe. The count canbe checked down the pipe by simple expressions,
#' for example has the number of NA increased after some operations?
#'
#' @param input Either a dlist object or a data frame.
#' @param exportname The name, in quotes, of the export variable.
#' @param pipe  True by default, set to false to use outside of pipe.
#' @param sum   True by default, set to false to return element wise count.
#'
#' @return returns the input and, as a side-effect, the CCMEM var with count.
#' @export
ccset <- function(input, exportname = "CCMEM", pipe = T, sum = T) {
stopifnot(is.data.frame(input) | is.list(input))
# function definitions:
# counts a specified element (this) in a vector.
count_this       <- function(vector, this) {
x <- vector[vector == this]
x <- x[!is.na(x)]
length(x)
}
# counts the number of zeros in df by mapping count_this with arg 0
count_df_zero    <- function(data) sum(map_int(data, count_this, 0))
count_dlst_zero <- function(input) purrr::map_int(input, count_df_zero)
# counts the number of NAs in data frame using base functions
count_df_NA      <- function(data) sum(is.na.data.frame(data))
count_dlst_NA   <- function(input) purrr::map_int(input, count_df_NA)
# counts the number of rows in all data frames using base functions
count_dlst_nrow <- function(input) purrr::map_int(input, nrow)
# execution of functions:
# output is a list
output <- vector("list", length = 3)
names(outputlist) <- c("nNA", "nzero", "nrow")
# handles both tables and lists
if(class(input)[1] == "tbl_df" | class(input)[1] == "data.frame") {
output$nNA   <- count_df_NA(input)
output$nzero <- count_df_zero(input)
output$nrow  <- nrow(input)
}
if(all((!is.data.frame(input[1])) & (class(input[1]) == "list"))) {
output$nNA   <- count_dlst_NA(input)
output$nzero <- count_dlst_zero(input)
output$nrow  <- count_dlst_nrow(input)
}
# by default the sum is calculated giving a response for the whole data
# frame or the whole list rather than a column or data frame specifc count.
if(sum  == TRUE) {
output$nNA   <- sum(output$nNA)
output$nzero <- sum(output$nzero)
output$nrow  <- sum(output$nrow)
}
# By default pipe setting is TRUE and the output is exported as a side effect
# if pipe set to FALSE the output is returned ordinarilit.
if(pipe == FALSE) {
return(output)} # << Function stops here if pipe == FALSE
# Exports outputlist to a variable (name set bt exportname) in parent frame.
assign(exportname, output, pos = parent.frame())
# Passes along unchanged input in pipe
return(input)
}
